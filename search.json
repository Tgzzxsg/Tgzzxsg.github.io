[{"title":"Hello World","path":"/2024/05/16/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"个人博客系统搭建","path":"/2024/05/09/个人博客系统搭建/","content":"📢闲来无事，想搭建一个个人博客，来记录工作或者学习过程中遇到的技术难题。为此，我了解到个人博客无非可以通过两种方式来做，第一种就是大家熟知的云服务器的方式；第二种则是通过GitHub Pages的方式，此文便是以GitHub的方式的搭建个人博客，诸君请看下文 技术栈 markdown yaml git Hexo stellar 安装git此步骤就不过多阐述了，相信大家都会做 配置git在gitbash中进行如下配置： 设置user.name以及user.email配置信息，可以设置全局 12git config --global user.name &quot;github用户名&quot;git config --global user.email &quot;github注册邮箱&quot; 然后可以通过git config --list命令查看配置信息是否生效，如下图： 生成秘钥 1ssh-keygen -t rsa -C &quot;github注册邮箱&quot; 然后一路回车即可，如下图： 最后得到了两个文件，id_rsa以及id_rsa.pub id_rsa:私有密钥文件id_rsa.pub:公共密钥文件，通过将公钥添加到需要远程的服务器上，比如GitHub，这样服务器就可以通过公钥来验证用户的身份 复制id_rsa.pub文件内容到GitHub 验证GitHub SSH 在gitbash中执行ssh -T ``git@github.com [提示]如果Hi后面是我们配置的用户名，则证明我们的以上配置是完全成功的 [注意] 如果ssh -T git@github.com命令报错，如下图，可以采用ssh 443端口 ssh 443端口方式如下： 先测试可用性 ssh -T -p 443 git@ssh.github.com如果有如下提示，说明可用 然后编辑~/.ssh/config 文件，如果没有config文件的话就直接 vim ~/.ssh/config加入以下内容： 123Host github.comHostname ssh.github.comPort 443 通过ssh -T git@github.com命令再次测试，发现可以成功了 安装node.jshttps://nodejs.org/en/download/https://nodejs.org/en/download/ 安装好之后会自动加入环境变量中，但是gitbash的环境变量好像和cmd的不共用，我更喜欢用gitbash，所以我又在gitbash中配置了node.js的环境变量 配置gitbash环境变量1vim ~/.bashrc 添加以下内容： 注意：这里有个坑：如果文件内容这么写：export PATH=$PATH:/e/Program Files/nodejs是会报错的，因为Program和Files中间有一个空格，所以需要对这个空格转义，在空格前添加反斜杠\\ 1export PATH=$PATH:/e/Program\\ Files/nodejs 保存文件后执行source ~/.bashrc令环境变量生效。 安装Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 这里我通过node.js的npm命令来下载 npm：npm是node.js的软件包管理器 安装hexo 1npm install -g hexo-cli 安装结果如下图： [注意]注意：如果安装完hexo-cli之后，依旧报错：bash: hexo: command not found 那么可能是环境变量的问题，需要将npm目录放入环境变量中vim ~/.bashrc 内容如下： 12export PATH=$PATH:/d/Program\\ Files/nodejsexport PATH=$PATH:/c/Users/y22306502/AppData/Roaming/npm 使用Hexo 通过hexo init myBlog命令来初始化博客 通过hexo s命令来启动hexo服务 hexo s 是一个用于启动 Hexo 本地服务器的命令。当你在本地开发博客或者进行博客内容的预览时，这个命令非常有用。具体来说，hexo s 命令做了以下几件事情： 生成静态文件：hexo s 命令首先会运行 hexo generate（或简写为 hexo g），这会将你的 Markdown 格式的博客文章和其他内容转换成静态网页文件，并存放在网站的 public 目录下。 启动服务器：接着，它会启动一个本地开发服务器，通常是使用 Express.js，一个 Node.js 的 web 应用框架。 实时预览：当你对文章内容或网站主题进行更改时，服务器会监测到文件的变化，并重新生成更改的内容。这意味着你可以在不手动触发生成过程的情况下，实时看到更改的效果。 访问网站：启动服务器后，你可以通过浏览器访问本地服务器上的网页。默认情况下，服务器会在 http://localhost:4000 上运行，你可以在浏览器中输入这个地址来查看你的网站。 命令的完整形式是 hexo server，而 hexo s 是它的简写形式。这个命令对于本地开发和测试 Hexo 网站非常方便，因为它允许你即时看到所做的更改，而不必每次都手动触发构建过程。 此外，hexo s 命令还有一些可选参数，例如，你可以指定一个不同的端口号来启动服务器： hexo s -p 5000这将会在 http://localhost:5000 上启动服务器，而不是默认的 4000 端口。 在浏览器中输入http://localhost:4000 修改Hexo的_config.yml文件内容，将Hexo与Github关联 通过hexo deploy或者hexo d命令将网站部署到GitHub服务器上 [注意] 在这里我遇到了一个坑，执行hexo d命令报错：ERROR Deployer not found: git 原因是没有安装hexo-deployer-git插件,通过npm install hexo-deployer-git --save命令下载hexo-deployer-git插件 然后再次执行hexo d命令，发现依旧报同样的错误，然后经过我的苦想，终于想到了问题可能出在仓库地址上，我仓库地址写的是https://github.com/Tgzzxsg/Tgzzxsg.github.io,正确的仓库地址应该是下图中的仓库地址： 修改_config.yml文件内容的仓库地址，再次执行hexo d命令这次没问题 更换主题可以访问以下链接更换blog主题 https://hexo.io/themes/https://hexo.io/themes/ [注意]注意更换主题需要通过hexo g命令重新生成静态网页，再通过hexo d命令部署到GitHub 使用npm命令下载主题插件时报错： 执行npm install，重试即可 源码管理 使用GitHub来管理源码 在GitHub上创建一个仓库，名为myblog-source 将源码仓库克隆（clone）到本地 1git clone https://github.com/username/myblog-source git clone 是 Git 版本控制系统中的一个命令，用于从远程仓库克隆一个存储库到本地计算机。具体来说： 这条命令做了以下几件事情： 克隆仓库：它会创建一个本地副本，包含远程仓库的所有文件、提交历史、分支和其他 Git 跟踪的数据。 URL：https://github.com/username/myblog-source 是 GitHub 上某个仓库的 URL。在这个例子中，username 是 GitHub 用户的用户名，myblog-source 是仓库的名称。 本地目录：执行命令后，Git 会在当前目录下创建一个名为 myblog-source 的新目录，并将远程仓库的内容克隆到这个目录中。 初始化本地仓库：克隆完成后，你将拥有一个包含 .git 隐藏目录的本地 Git 仓库，这个目录包含了所有的版本控制信息。 这个命令常用于以下场景： 开始新项目：当你需要从现有的项目开始时，可以克隆该项目的仓库。 贡献代码：如果你想为某个开源项目贡献代码，可以克隆仓库，然后在本地进行修改并提交 Pull Request。 备份和迁移：克隆仓库也可以用于备份或将仓库迁移到另一个位置。 请确保你有权访问你尝试克隆的仓库。如果是私有仓库，你需要有相应的访问权限或访问凭证。如果是公共仓库，你可以直接克隆而无需任何凭证。 此外，如果你在执行此命令时遇到问题，确保检查以下几点： 确认仓库 URL 是否正确。 确认你是否有网络连接，并且网络连接是否稳定。 如果你在公司或学校网络，确保网络策略允许你访问 GitHub。 如果 URL 是正确的，并且网络没有问题，可能是 GitHub 服务器的问题，可以稍后再试。 然后在此仓库中配置一下忽略文件： 12345.DS_Storenode_modulesdb.json.deploy_gitpublic 这些文件可以根据我们的源码生成，所以建议忽略它们，不让版本库追踪这些文件的变化。然后把我们的博客工程目录整个复制进来，或者在这里面重新创建一个，最终 myblog-source 仓库目录结构会是这样的： 12345678910111213myblog-source:-scaffolds:# 模版-draft.md-page.md-post.md-source:_posts:# 这里面存放文章-xxx.md-themes:...-_config.yml# 配置文件-package.json... 然后把这些文件提交并推送到 GitHub 上就可以啦： 12345#git status 查看修改记录git add --all#git status 查看暂存分区git commit -m &quot;update&quot;git push origin main","tags":["blog"],"categories":["技术探索"]},{"title":"关于","path":"/about/index.html","content":"铁骨铮铮潇洒哥智慧与幽默并存 关于本站 建设中，敬请期待。。。"},{"title":"探索号 🛰️ 文章分享","path":"/knowledge/articles.html","content":"关于 Stellar 探索号用户遇到问题第一步应该是查找官方文档，但是官方文档未必能够面面俱到，尤其是一些 DIY 方面的内容，这时候如果能有一个入口列出相关外站文章的话，对用户来说会非常有帮助，于是「Stellar 探索号」应运而生。任何人都可以很方便地提交文章到这个列表，只需要创建一个 issue 就可以了。如果您也有与 Stellar 相关的文章并希望显示在这里，可以直接在 hexo-theme-stellar 中选择【文章分享】模板按照格式提交即可，立即生效。"},{"title":"使用 Stellar 主题的博客","path":"/knowledge/examples.html","content":"小提示如果您也使用了 Stellar 并希望显示在这里，可以在 hexo-theme-stellar-showcase 中提交 issue 告知您的站点信息，在您提交后的大约 3 分钟内生效。"},{"title":"开始您全新的博客之旅","path":"/knowledge/index.html","content":"Stellar 是一个内置文档系统的简约商务风 Hexo 主题，支持丰富的标签和动态数据组件，帮助您简单从容地应对各种表达需求，十分推荐内容创作者使用 Stellar 开始您全新的博客之旅。 了解 Stellar 的设计理念“真正的简约远不止删繁就简，而是在纷繁中建立秩序。”人的注意力是有限的，要提高有效信息的醒目程度，就必须降低不重要信息醒目程度，删除所有无效信息。降低视觉密度增加留白，增加间距。减少颜色丰富度，大面积出现的是中性色，彩色必须有其特殊意义，意义相同的元素使用同一种颜色。提高有效信息优先级文章标题永远是最大的，对比度最高的不可交互的不重要的小标题（如侧边栏某个插件的标题）降低对比度与文章相关的不重要的小标题，使用小号字体删掉无效信息文章标签、字数、阅读量、评论数网站访问量、字数、搭建时间全局播放器（除了特殊文章） 开始前的准备工作尽管我们致力于降低使用门槛，但是自建独立博客仍然需要一定的相关知识，markdown 常用语法是必须要掌握的，除此之外，您还需要知道 yaml 文件格式、简单的 git 知识，最最重要的是，遇到问题知道该如何高效地寻找答案： 翻阅和搜索文档 搜索 issues 中是否已经有解决办法 如果没有，新建 issue 并按照要求进行操作，详尽地描述您遇到的问题 如果您没有使用过 Hexo 也不要着急，我十分建议您去通读一遍 Hexo 中文文档。 https://hexo.io/zh-cn/docs/https://hexo.io/zh-cn/docs/ 此外，如果您从旧版本更新或者其它主题迁移，请确保环境版本不要太低，否则会产生兼容性问题： 建议的版本1234Hexo: 6.3.0 ~ 7.0.0hexo-cli: 4.3.0 ~ latestnode: 14.17.3 ～ 20.10.0 # 建议选择 LTS 版本，过高的版本 hexo 还没有进行兼容。npm: 6.14.13 ~ 10.2.3 安装与更新稳定版最新版自定义引用源码安装方法在终端中输入：在 blog/_config.yml 文件中找到并修改：更新方法在 package.json 中修改 stellar 的版本号，然后执行：阅读 更新日志 进行迁移操作。适用范围稳定版适用于以内容创作为主，不需要自定义主题，追求稳定和可靠性的用户。安装方法把 Stellar 主题仓库添加为博客仓库的子模块在 blog/_config.yml 文件中找到并修改：更新方法打开终端并进入主题文件夹，执行：阅读 更新日志 进行迁移操作。适用范围最新版适用于以内容创作为主，不需要自定义主题，追求新特性的用户。安装方法把 Stellar 主题仓库 fork 到您的 GitHub 账号下把您 fork 的 Stellar 主题仓库添加为博客仓库的子模块在 blog/_config.yml 文件中找到并修改：更新方法在您 fork 的 Stellar 主题仓库打开终端，执行：阅读 更新日志 进行迁移操作。适用范围自定义版适用于对主题有自定义需求，且掌握了一定的前端知识和动手能力的用户。安装方法下载源码放到 themes/ 文件夹下面试用。适用范围仅适合测试，无法获得更新。 Star History本项目永久开源免费，如果您喜欢本项目，请点个赞支持一下吧～ 开源许可协议项目中的许可声明文件应包含在所有副本中 本项目是由 @xaoxuu 设计和开发，后期也合并了 开源贡献者 提交的代码，使用 MIT License 开源许可协议进行授权，拷贝、分享或基于此进行创作时请遵守协议内容： 123456789101112131415161718192021MIT LicenseCopyright (c) 2021 xaoxuuPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE."},{"title":"Linux板块建设","path":"/knowledge/linux.html","content":"Linux建设中。。。"},{"title":"更新日志与注意事项","path":"/knowledge/releases.html","content":"文档更新记录 版本命名规范：大版本 小版本 修复版本 大版本：较大范围改动和设计调整、重构 小版本：较小范围改动、增加删除功能，也可能包含部分修复 修复版本：仅包含修复或代码优化，可放心无缝升级 如何关注主题更新例如，您可以在自己博客任意位置用时间线标签显示主题最近一个版本更新内容：12&#123;% timeline api:https://api.github.xaox.cc/repos/xaoxuu/hexo-theme-stellar/releases?per_page=1 %&#125;&#123;% endtimeline %&#125;"},{"title":"Windows使用tree命令","path":"/knowledge/tree.html","content":"安装建设中。。。"}]